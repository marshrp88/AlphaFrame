name: AlphaFrame CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feat/alphapro ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Lint and Test Job
  test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Run linting
      run: pnpm lint
      
    - name: Run tests
      run: pnpm test:coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: Run E2E tests
      run: pnpm test:e2e
      
  # Build Job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Build application
      run: pnpm build
      env:
        VITE_APP_ENV: production
        VITE_PLAID_CLIENT_ID: ${{ secrets.PLAID_CLIENT_ID }}
        VITE_PLAID_SECRET: ${{ secrets.PLAID_SECRET }}
        VITE_PLAID_ENV: production
        VITE_AUTH_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
        VITE_AUTH_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
        VITE_AUTH_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
        VITE_SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        
  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: Deploy to Vercel, Netlify, or custom server
        
    - name: Notify deployment
      run: |
        echo "Staging deployment completed successfully"
        
  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # Example: Deploy to Vercel, Netlify, or custom server
        
    - name: Notify deployment
      run: |
        echo "Production deployment completed successfully"
        
  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      
    - name: Run npm audit
      run: pnpm audit --audit-level moderate
      
  # Performance Test
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Run Lighthouse CI
      run: |
        pnpm install -g @lhci/cli
        lhci autorun 